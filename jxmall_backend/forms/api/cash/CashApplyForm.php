<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-11-05
 * Time: 15:06
 */

namespace app\forms\api\cash;


use app\core\ApiCode;
use app\helpers\BalanceLogHelper;
use app\helpers\BankHelper;
use app\helpers\OptionHelper;
use app\helpers\ResponseHelper;
use app\models\Bank;
use app\models\BaseModel;
use app\models\Cash;
use app\models\User;
use DeepCopy\f001\B;

class CashApplyForm extends BaseModel
{
    public $cash_type;
    public $type;
    public $cash_price;
    public $account;
    public $bank_name;
    public $name;
    public $bank_branch_name;
    public $bank_code;


    public function rules()
    {
        return [
            [['type'], 'integer'],
            [['cash_type', 'bank_name', 'account', 'name', 'bank_branch_name', 'bank_code'], 'string'],
            [['cash_price'], 'number']
        ]; // TODO: Change the autogenerated stub
    }


    public function apply()
    {

        if (!$this->validate()) {

            return $this->responseErrorInfo();
        }

        $this->type = $this->type ?? 0;
        $setting = OptionHelper::get('cash_setting', \Yii::$app->mall->id);
        if (!$setting) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '未开启提现');
        }


        /**
         * @var User $user ;
         */
        $user = \Yii::$app->user->identity;
        if ($this->type == 0) {
            if ($user->price < $this->cash_price) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '佣金不足');
            }
            $user->price -= $this->cash_price;
        }

        if ($this->type == 1) {
            if ($user->money < $this->cash_price) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '余额不足');
            }
            $user->money -= $this->cash_price;
        }
        if ($this->type == 0) {//提现佣金
            $service_price = $setting['price']['service_price'];
            $max_price = $setting['price']['max_price'];
            $day_cash = Cash::find()
                ->where(['user_id' => \Yii::$app->user->identity->id, 'is_delete' => 0, 'type' => 0])
                ->andWhere(['!=', 'status', 2])
                ->andWhere(['>', 'created_at', strtotime(date('Y-m-d', time()))])
                ->sum('cash_price');
            $day_cash = $day_cash ?? 0;
            if ($max_price) {
                if ($max_price < ($this->cash_price + $day_cash)) {
                    return $this->apiResponse(ApiCode::CODE_FAIL, '超过当日最高提现额度');
                }
            }
        }
        if ($this->type == 1) {//提现佣金
            $service_price = $setting['balance']['service_price'];
            $max_price = $setting['balance']['max_price'];
            $day_cash = Cash::find()
                ->where(['user_id' => \Yii::$app->user->identity->id, 'is_delete' => 0, 'type' => 1])
                ->andWhere(['!=', 'status', 2])
                ->andWhere(['>', 'created_at', strtotime(date('Y-m-d', time()))])
                ->sum('cash_price');
            $day_cash = $day_cash ?? 0;
            if ($max_price) {
                if ($max_price < ($this->cash_price + $day_cash)) {
                    return $this->apiResponse(ApiCode::CODE_FAIL, '超过当日最高提现额度');
                }
            }
        }
        $t = \Yii::$app->db->beginTransaction();
        $service_price = $service_price ?? 0;
        $price = $this->cash_price - $this->cash_price * $service_price / 100;
        $cash = new Cash();
        $cash->cash_price = $this->cash_price;
        $cash->type = $this->type;
        $cash->price = $price;
        $cash->service_price = $this->cash_price * $service_price / 100;
        $cash->cash_type = $this->cash_type;
        $cash->mall_id = \Yii::$app->mall->id;
        $cash->user_id = $user->id;
        if ($this->cash_type == 'bank') {
            if (!$this->bank_name || !$this->account || !$this->name) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '请完善账户信息');
            }
            $cash->bank_name = $this->bank_name;
            $cash->account = $this->account;
            $cash->name = $this->name;
            $cash->bank_code = $this->bank_code;
            $bank = Bank::findOne(['user_id' => $user->id, 'is_delete' => 0]);
            if (!$bank) {
                $bank = new Bank();
                $bank->mall_id = $user->mall_id;
                $bank->user_id = $user->id;
            }
            $bank->bank_branch_name = $this->bank_branch_name;
            $bank->name = $this->name;
            $bank->account = $this->account;
            $bank->bank_name = $this->bank_name;
            $bank->bank_code=$this->bank_code;

            $bank->save();
        }
        if ($this->cash_type == 'alipay') {
            if (!$this->account || !$this->name) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '请完善账户信息');
            }
            $cash->account = $this->account;
            $cash->name = $this->name;
        }

        if ($this->cash_type == 'wechat') {
            if (!$this->account) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '请完善账户信息');
            }
            $cash->account = $this->account;
        }
        if (!$cash->save()) {
            $t->rollBack();
            return $this->responseErrorMsg($cash);
        }
        if (!$user->save()) {
            $t->rollBack();
            return $this->responseErrorMsg($user);
        }
        if ($cash->cash_type == 'balance' && $cash->type == 0) {//提现到余额
            if ($setting['price']['is_check_balance'] == 0) {
                //提现到余额
                if (!BalanceLogHelper::add($cash->user_id, $cash->price, '佣金提现到余额')) {
                    $t->rollBack();
                    return $this->apiResponse(ApiCode::CODE_FAIL, '发生错误');
                }
                $cash->is_price = 1;
                $cash->status = 1;
                if (!$cash->save()) {
                    $t->rollBack();
                    return $this->responseErrorMsg($cash);
                }
                $t->commit();
                return $this->apiResponse(ApiCode::CODE_SUCCESS, '打款成功!');
            }
        }
        $t->commit();
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '提交成功');
    }

    public function getBankList()
    {

        $list = BankHelper::getBankList();

        return ResponseHelper::send(ApiCode::CODE_SUCCESS, '', ['list' => $list]);
    }
}

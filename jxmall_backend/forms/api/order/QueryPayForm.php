<?php
/**
 * Created by PhpStorm.
 * User: ganxi
 * Date: 2022/4/29
 * Time: 9:32
 * Note:
 */

namespace app\forms\api\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\helpers\LockHelper;
use app\helpers\ResponseHelper;
use app\helpers\WechatHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\PayFlow;
use app\models\UnionOrder;
use app\models\WechatOrder;
use EasyWeChat\Kernel\Exceptions\InvalidArgumentException;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;

class QueryPayForm extends BaseModel
{
    public $common_order_id;
    public $union_order_id;

    public function rules()
    {
        return [
            [['union_order_id', 'common_order_id'], 'integer']
        ]; // TODO: Change the autogenerated stub
    }

    public function query()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        WechatHelper::init($this->mall_id);
        if ($this->union_order_id) {
            $order = UnionOrder::findOne(['id' => $this->union_order_id, 'is_delete' => 0]);
            if (!$order) {
                return ResponseHelper::send(ApiCode::CODE_FAIL, '订单不存在!');
            }
            if ($order->is_pay == 1) {
                return ResponseHelper::send(ApiCode::CODE_SUCCESS, '订单已支付');
            }
            $wechatOrder = WechatOrder::findOne(['order_no' => $order->union_no, 'is_delete' => 0]);
        }
        if ($this->common_order_id) {
            $order = CommonOrder::findOne(['id' => $this->common_order_id, 'is_delete' => 0]);
            if (!$order) {
                return ResponseHelper::send(ApiCode::CODE_FAIL, '订单不存在!');
            }
            if ($order->is_pay == 1) {
                return ResponseHelper::send(ApiCode::CODE_SUCCESS, '支付成功');
            }
            $wechatOrder = WechatOrder::findOne(['order_no' => $order->order_no, 'is_delete' => 0]);
        }
        if (!$wechatOrder) {
            return ResponseHelper::send(ApiCode::CODE_SUCCESS, '订单不存在');
        }
        if ($wechatOrder->is_pay) {
            return ResponseHelper::send(ApiCode::CODE_SUCCESS, '订单已支付');
        }
        if ($wechatOrder->pay_type == WechatOrder::PAY_JOINPAY) {
            $res = \Yii::$app->joinPay->queryOrder($wechatOrder->order_no);
            if ($res && $res['ra_Status'] == 100 && isset($res['rd_OpenId'])) {
                if (LockHelper::setWechatOrder($wechatOrder->id)) {
                    $wechatOrder->is_pay = 1;
                    $wechatOrder->transaction_id = $res['r9_BankTrxNo'];
                    $wechatOrder->pay_time = date('Y-m-d H:i:s', time());
                    if (!$wechatOrder->save()) {
                        \Yii::warning($wechatOrder->getFirstErrors());
                    }
                }
                return ResponseHelper::send(ApiCode::CODE_SUCCESS, '支付成功');
            }
            return ResponseHelper::send(ApiCode::CODE_FAIL, '支付失败！');
        }
        if ($wechatOrder->pay_type = WechatOrder::PAY_WECHAT) {
            \Yii::$app->platform = $wechatOrder->platform;
            $app = \Yii::$app->wechat->payment;
            try {
                $res = $app->order->queryByOutTradeNumber($wechatOrder->order_no);
            } catch (InvalidArgumentException $e) {
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            } catch (InvalidConfigException $e) {
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            }
            if ($res['return_code'] == 'SUCCESS') {
                if ($res['trade_state'] == 'SUCCESS') {
                    if (LockHelper::setWechatOrder($wechatOrder->id)) {
                        $wechatOrder->is_pay = 1;
                        $wechatOrder->transaction_id = $res['transaction_id'];
                        $wechatOrder->pay_time = date('Y-m-d H:i:s', time());
                        if (!$wechatOrder->save()) {
                            \Yii::warning($wechatOrder->getFirstErrors());
                        }
                    }
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, '支付成功');
                }
            }
            return ResponseHelper::send(ApiCode::CODE_SUCCESS, '支付失败');
        }
        return ResponseHelper::send(ApiCode::CODE_FAIL, '支付失败');
    }

}
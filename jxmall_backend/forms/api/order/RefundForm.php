<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-17
 * Time: 20:47
 */

namespace app\forms\api\order;


use app\core\ApiCode;
use app\helpers\OptionHelper;
use app\helpers\SerializeHelper;
use app\models\BaseModel;
use app\models\CommonOrderDetail;
use app\models\OrderRefund;

class RefundForm extends BaseModel
{

    public $order_detail_id;
    public $content;
    public $type;
    public $pic_list;
    public $order_id;


    public function rules()
    {
        return [
            [['pic_list'], 'string'],
            [['content'], 'string'],
            [['type'], 'integer'],
            [['order_detail_id', 'order_id'], 'required'],
            [['order_detail_id', 'order_id'], 'integer'],
        ]; // TODO: Change the autogenerated stub
    }

    public function preview()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $setting = OptionHelper::get('mall_setting', $this->mall_id);
        if ($setting && $setting['is_ban_cancel'] == 1) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '此订单不可取消!');
        }
        $order_detail = CommonOrderDetail::findOne(['is_delete' => 0, 'id' => $this->order_detail_id]);
        if (!$order_detail) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在');
        }
        $order_detail->attr = SerializeHelper::decode($order_detail->attr);

        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['detail' => $order_detail, 'goods' => $order_detail->goods]);
    }

    public function save()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $setting = OptionHelper::get('mall_setting', $this->mall_id);
        if ($setting && $setting['is_ban_cancel'] == 1) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '此订单不可取消!');
        }
        $order_detail = CommonOrderDetail::findOne(['is_delete' => 0, 'id' => $this->order_detail_id]);
        if (!$order_detail) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在');
        }
        $refund = OrderRefund::findOne(['order_detail_id' => $this->order_detail_id]);
        if ($refund) {
            if (in_array($refund->status, [0, 1])) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '该商品已申请售后，请勿重复提交');
            }
        }
        $refund = new OrderRefund();
        $refund->mall_id = $order_detail->mall_id;
        $refund->order_id = $this->order_id;
        $refund->order_detail_id = $order_detail->id;
        $refund->refund_price = $order_detail->pay_price;
        $refund->user_id = \Yii::$app->user->identity->id;
        $refund->type = $this->type;
        $refund->content = $this->content;
        $refund->pic_list = $this->pic_list;
        $refund->goods_id = $order_detail->goods_id;
        $refund->order_no = OrderRefund::generateOrderNo(\Yii::$app->user->identity->id);
        if (!$refund->save()) {
            return $this->responseErrorMsg($refund);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '提交成功');
    }
}

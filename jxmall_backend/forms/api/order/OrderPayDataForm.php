<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-09-22
 * Time: 0:16
 */

namespace app\forms\api\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\helpers\BalanceLogHelper;
use app\helpers\ConstantHelper;
use app\helpers\LockHelper;
use app\helpers\PaymentHelper;
use app\helpers\ResponseHelper;
use app\helpers\WechatHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\CommonOrderDetail;
use app\models\PayFlow;
use app\models\UnionOrder;
use app\models\User;
use app\models\WechatOrder;
use EasyWeChat\Kernel\Exceptions\InvalidArgumentException;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;
use yii\base\Exception;

class OrderPayDataForm extends BaseModel
{
    public $union_order_id;//union_order_id
    public $pay_type;
    public $common_order_id;

    public function rules()
    {
        return [
            [['union_order_id'], 'integer'],
            [['common_order_id'], 'integer'],
            [['pay_type'], 'string']
        ]; // TODO: Change the autogenerated stub
    }

    public function search()
    {
        WechatHelper::init($this->mall_id);
        $payment = PaymentHelper::payment(\Yii::$app->mall->id);
        $app = \Yii::$app->wechat->payment;
        if ($this->union_order_id) {
            $order = UnionOrder::findOne(['id' => $this->union_order_id, 'user_id' => \Yii::$app->user->identity->id, 'is_delete' => 0]);
            if (!$order) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '未找到订单');
            }
            $data['order_no'] = $order->union_no;
            $data['pay_price'] = $order->pay_price;
            if ($order->pay_price <= 0) {
                $order->pay_type = PaymentType::TYPE_SYSTEM;
                $order->is_pay = 1;
                if (!$order->save()) {
                    CommonOrder::updateAll(['platform' => \Yii::$app->platform], ['union_no' => $order->union_no, 'is_delete' => 0]);
                    return $this->apiResponse(ApiCode::CODE_FAIL, '支付失败', ['error' => $order->getErrors()]);
                }
                return $this->apiResponse(ApiCode::CODE_FAIL, '支付成功', ['is_pay' => 1]);
            }
        }
        if ($this->common_order_id) {
            $order = CommonOrder::findOne(['is_pay' => 0, 'user_id' => \Yii::$app->user->identity->id, 'id' => $this->common_order_id]);
            if (!$order) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '未找到订单');
            }
            $wechatOrder = WechatOrder::findOne(['order_no' => $order->union_no, 'is_delete' => 0]);
            if ($wechatOrder) {
                if ($wechatOrder->is_pay == 1) {
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, '订单已支付');
                }
                WechatHelper::init($wechatOrder->mall_id);
                if ($wechatOrder->pay_type == WechatOrder::PAY_JOINPAY) {//汇聚支付
                    $res = \Yii::$app->joinPay->queryOrder($wechatOrder->order_no);
                    if ($res && is_array($res) && $res['ra_Status'] == 100) {
                        if (LockHelper::setWechatOrder($wechatOrder->id)) {
                            $wechatOrder->is_pay = 1;
                            $wechatOrder->transaction_id = $res['r5_TrxNo'];
                            $wechatOrder->pay_time = date('Y-m-d H:i:s', time());
                            if (!$wechatOrder->save()) {
                                \Yii::warning($wechatOrder->getFirstErrors());
                            }
                        }
                        return ResponseHelper::send(ApiCode::CODE_FAIL, '订单已支付');
                    }

                }

                if ($wechatOrder->pay_type == WechatOrder::PAY_WECHAT) {//汇聚支付
                    try {
                        $res = $app->order->queryByOutTradeNumber($wechatOrder->order_no);
                    } catch (InvalidArgumentException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    } catch (InvalidConfigException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                    if ($res) {
                        if ($res['return_code'] == 'SUCCESS') {
                            if (isset($res['trade_state']) && $res['trade_state'] == 'SUCCESS') {
                                return ResponseHelper::send(ApiCode::CODE_FAIL, '订单已支付');
                            }
                        }
                    }

                }
            }

            $wechatOrder = WechatOrder::findOne(['order_no' => $order->order_no, 'is_delete' => 0]);
            if ($wechatOrder) {
                if ($wechatOrder->is_pay == 1) {
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, '订单已支付');
                }
                WechatHelper::init($wechatOrder->mall_id);
                if ($wechatOrder->pay_type == WechatOrder::PAY_JOINPAY) {//汇聚支付
                    $res = \Yii::$app->joinPay->queryOrder($wechatOrder->order_no);
                    if ($res && is_array($res) && $res['ra_Status'] == 100) {
                        if (LockHelper::setWechatOrder($wechatOrder->id)) {
                            $wechatOrder->is_pay = 1;
                            $wechatOrder->transaction_id = $res['r5_TrxNo'];
                            $wechatOrder->pay_time = date('Y-m-d H:i:s', time());
                            if (!$wechatOrder->save()) {
                                \Yii::warning($wechatOrder->getFirstErrors());
                            }
                        }
                        return ResponseHelper::send(ApiCode::CODE_FAIL, '订单已支付');
                    }
                }
                if ($wechatOrder->pay_type == WechatOrder::PAY_WECHAT) {//汇聚支付
                    try {
                        $res = $app->order->queryByOutTradeNumber($wechatOrder->order_no);
                    } catch (InvalidArgumentException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    } catch (InvalidConfigException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                    if ($res) {
                        if ($res['return_code'] == 'SUCCESS') {
                            if (isset($res['trade_state']) && $res['trade_state'] == 'SUCCESS') {
                                return ResponseHelper::send(ApiCode::CODE_FAIL, '订单已支付');
                            }
                        }
                    }
                }
            }
            //检测完unionOrder 检查commonOrder
            $data['order_no'] = $order->order_no;
            $data['pay_price'] = $order->pay_price;
            if ($order->pay_price <= 0) {
                $order->is_pay = 1;
                $order->pay_type = PaymentType::TYPE_SYSTEM;
                $order->pay_time = time();
                $order->platform = \Yii::$app->platform;
                if (!$order->save()) {
                    return $this->apiResponse(ApiCode::CODE_FAIL, '支付失败', ['error' => $order->getErrors()]);
                }
                return $this->apiResponse(ApiCode::CODE_FAIL, '支付成功', ['is_pay' => 1]);
            }
        }
        $data['created_at'] = $order->created_time;
        if ($order->is_pay) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单已经支付');
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['payment' => $payment, 'order_info' => $data, 'balance' => \Yii::$app->user->identity->money]);
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-10-26
     * @Time: 8:37
     * @Note:
     * @return array
     */
    public function pay()
    {
        /**
         * @var  User $user ;
         */
        $user = \Yii::$app->user->identity;
        WechatHelper::init(\Yii::$app->mall->id);
        if ($this->union_order_id) {

            $order = UnionOrder::findOne(['id' => $this->union_order_id, 'user_id' => \Yii::$app->user->identity->id, 'is_cancel' => 0]);
            if (!$order) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在或已取消！');
            }
            if ($order->is_pay) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '订单已支付');
            }

            $res = $this->checkUnionOrderGoodsLimit($order);
            if ($res['code']) {
                return $res;
            }

            if ($this->pay_type == 'BALANCE_PAY') {
                $order->pay_type = PaymentType::TYPE_BALANCE;
                if ($user->money >= $order->pay_price) {
                    try {
                        if (BalanceLogHelper::sub($user->id, $order->pay_price, "支付订单：{$order->union_no}")) {
                            $order->is_pay = 1;
                            if (!$order->save()) {
                                CommonOrder::updateAll(['platform' => \Yii::$app->platform], ['union_no' => $order->union_no, 'is_delete' => 0]);
                                return $this->apiResponse(ApiCode::CODE_FAIL, '支付失败', ['error' => $order->getErrors()]);
                            }
                            PayFlow::saveFlow($order->pay_price, $order->union_no, UnionOrder::class, $order->union_no, $order->user_id, $order->mall_id, 1, PayFlow::BALANCE_PAY);
                            return $this->apiResponse(ApiCode::CODE_SUCCESS, '支付成功');
                        }
                    } catch (Exception $e) {
                        return $this->apiResponse(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                } else {
                    return $this->apiResponse(ApiCode::CODE_FAIL, '余额不足！');
                }
            }
            if ($this->pay_type == 'WECHAT_PAY') {
                $res = PaymentHelper::pay($order->union_no, $order->pay_price, '商城购物', $order->user_id, $order->mall_id, UnionOrder::class);
                \Yii::warning($res);
                if ($res['code'] == 0) {
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, '', ['pay_data' => $res['pay_data']]);
                } else {
                    if ($res['msg'] == 'INVALID_REQUEST') {//需要重新下单
                        $order->union_no = UnionOrder::generateOrderNo($order->user_id);
                        if (!$order->save()) {
                            return $this->responseErrorMsg($order);
                        }
                        \Yii::warning($order->union_no);
                        $res = PaymentHelper::pay($order->union_no, $order->pay_price, '商城购物', $order->user_id, $order->mall_id, UnionOrder::class);
                    }
                }
                return $res;
            }
            return $this->apiResponse(ApiCode::CODE_FAIL, '支付失败');
        }
        if ($this->common_order_id) {
            $order = CommonOrder::findOne(['is_pay' => 0, 'user_id' => \Yii::$app->user->identity->id, 'id' => $this->common_order_id]);
            if (!$order) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '未找到订单');
            }
            $res = $this->checkCommonOrderGoodsLimit($order);
            if ($res['code']) {
                return $res;
            }

            if ($this->pay_type == 'WECHAT_PAY') {
                $res = PaymentHelper::pay($order->order_no, $order->pay_price, '商城购物', $order->user_id, $order->mall_id, CommonOrder::class);
                \Yii::warning($res);
                if ($res['code'] == 0) {
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, '', ['pay_data' => $res['pay_data']]);
                } else {
                    if ($res['msg'] == 'INVALID_REQUEST') {//需要重新下单
                        $order->order_no = CommonOrder::generateOrderNo($order->user_id);
                        if (!$order->save()) {
                            return $this->responseErrorMsg($order);
                        }
                        \Yii::warning($order->order_no);
                        $res = PaymentHelper::pay($order->order_no, $order->pay_price, '商城购物', $order->user_id, $order->mall_id, CommonOrder::class);
                    }
                }
                return $res;
            }
            if ($this->pay_type == 'BALANCE_PAY') {
                $order->pay_type = PaymentType::TYPE_BALANCE;
                if ($user->money >= $order->pay_price) {
                    try {
                        if (BalanceLogHelper::sub($user->id, $order->pay_price, "支付订单：{$order->order_no}")) {
                            $order->is_pay = 1;
                            $order->pay_time = time();
                            $order->platform = \Yii::$app->platform;
                            if (!$order->save()) {
                                return $this->apiResponse(ApiCode::CODE_FAIL, '支付失败', ['error' => $order->getErrors()]);
                            }
                            PayFlow::saveFlow($order->pay_price, $order->order_no, CommonOrder::class, $order->order_no, $order->user_id, $order->mall_id, PayFlow::TYPE_IN, PayFlow::BALANCE_PAY);

                            return $this->apiResponse(ApiCode::CODE_SUCCESS, '支付成功');
                        }
                    } catch (Exception $e) {
                        return $this->apiResponse(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                } else {
                    return $this->apiResponse(ApiCode::CODE_SUCCESS, '余额不足！');
                }
            }
        }
    }

    /**
     * Created by: ganxh
     * Date: 2022/1/24
     * Time: 13:43
     * Note:
     * @param UnionOrder $order
     */
    private function checkUnionOrderGoodsLimit($order)
    {

        $commonOrder = CommonOrder::findOne(['union_no' => $order->union_no]);
        if ($commonOrder) {
            $list = CommonOrderDetail::find()->andWhere(['common_order_id' => $commonOrder->id, 'is_delete' => 0])->with('goods')->all();

            /**
             * @var CommonOrderDetail[] $list
             */
            foreach ($list as $item) {
                $goods = $item->goods;

                $total_stock = $goods->total_stock;

                $current_sales = CommonOrder::find()
                    ->alias('o')
                    ->innerJoin(['d' => CommonOrderDetail::tableName()], 'o.order_no=d.common_order_no')
                    ->andWhere(['d.goods_id' => $goods->id])->andWhere(['o.is_pay' => 1])
                    ->andWhere(['o.status' => [0, 1]])
                    ->sum('d.num');

                if ($total_stock <= $current_sales) {
                    return ResponseHelper::send(ApiCode::CODE_FAIL, "商品：{$goods->name}已售罄！");
                }

                if ($goods && $goods->is_limit) {
                    $limit_num = $goods->limit_num;
                    $num = CommonOrder::find()
                        ->alias('o')
                        ->innerJoin(['d' => CommonOrderDetail::tableName()], 'o.order_no=d.common_order_no')
                        ->andWhere(['o.user_id' => \Yii::$app->user->identity->id, 'o.is_delete' => 0])
                        ->andWhere(['d.goods_id' => $goods->id])->andWhere(['o.is_pay' => 1])->sum('d.num');
                    $num = $num ?? 0;
                    $num += $item->num;
                    if ($num > $limit_num) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, "商品：{$goods->name},超出了购买限制");
                    }
                }
            }
        }

        return ResponseHelper::send(ApiCode::CODE_SUCCESS, '可以购买');
    }

    /**
     * Created by: ganxh
     * Date: 2022/1/24
     * Time: 13:43
     * Note:
     * @param CommonOrder $order
     */
    private function checkCommonOrderGoodsLimit($order)
    {
        $list = CommonOrderDetail::find()->andWhere(['common_order_id' => $order->id, 'is_delete' => 0])->with('goods')->all();
        /**
         * @var CommonOrderDetail[] $list
         */
        foreach ($list as $item) {
            $goods = $item->goods;
            $total_stock = $goods->total_stock;
            $current_sales = CommonOrder::find()
                ->alias('o')
                ->innerJoin(['d' => CommonOrderDetail::tableName()], 'o.order_no=d.common_order_no')
                ->andWhere(['d.goods_id' => $goods->id])->andWhere(['o.is_pay' => 1])
                ->andWhere(['o.status' => [0, 1]])
                ->sum('d.num');
            if ($total_stock <= $current_sales) {
                return ResponseHelper::send(ApiCode::CODE_FAIL, "商品：{$goods->name}已售罄！");
            }
            if ($goods && $goods->is_limit) {
                $limit_num = $goods->limit_num;
                $num = CommonOrder::find()
                    ->alias('o')
                    ->innerJoin(['d' => CommonOrderDetail::tableName()], 'o.order_no=d.common_order_no')
                    ->andWhere(['o.user_id' => \Yii::$app->user->identity->id, 'o.is_delete' => 0])
                    ->andWhere(['d.goods_id' => $goods->id])->andWhere(['o.is_pay' => 1])->sum('d.num');
                $num += $item->num;
                if ($num > $limit_num) {
                    return ResponseHelper::send(ApiCode::CODE_FAIL, "商品：{$goods->name},超出了购买限制");
                }
            }
        }
        return ResponseHelper::send(ApiCode::CODE_SUCCESS, '可以购买');
    }

}

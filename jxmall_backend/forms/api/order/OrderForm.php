<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-09-30
 * Time: 23:45
 */

namespace app\forms\api\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\forms\common\express\ExpressQueryForm;
use app\helpers\BalanceLogHelper;
use app\helpers\OptionHelper;
use app\helpers\PaymentHelper;
use app\helpers\ResponseHelper;
use app\helpers\SerializeHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\CommonOrderDetail;
use app\models\ExpressLog;
use app\models\Order;
use app\models\WechatOrder;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;
use yii\base\Exception;

class OrderForm extends BaseModel
{
    public $order_id;

    public function rules()
    {
        return [
            [['order_id'], 'integer'],
            [['order_id'], 'required'],
        ]; // TODO: Change the autogenerated stub
    }

    public function detail()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'user_id' => \Yii::$app->user->identity->id]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $list = CommonOrderDetail::find()->with('goods')->where(['common_order_no' => $order->order_no, 'is_delete' => 0])->asArray()->all();
        if (!count($list)) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '未找到商品详情');
        }
        foreach ($list as &$item) {

            if ($item['attr']) {
                $item['attr'] = SerializeHelper::decode($item['attr']);
            } else {
                $item['attr'] = [];
            }


        }
        unset($item);
        $order->created_at = date('Y-m-d H:i:s', $order->created_at);
        $order->pay_time = date('Y-m-d H:i:s', $order->pay_time);
        $common_order = CommonOrder::findOne(['order_id' => $this->order_id, 'is_delete' => 0]);
        if (!$common_order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }


        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['list' => $list, 'order' => $order, 'common_order' => $common_order]);
    }


    public function cancel()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }

        $setting = OptionHelper::get('mall_setting', $this->mall_id);
        if ($setting && $setting['is_ban_cancel'] == 1) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '此订单不可取消!');
        }
        $t = \Yii::$app->db->beginTransaction();
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'user_id' => \Yii::$app->user->identity->id]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $order->is_cancel = 1;
        $order->cancel_at = time();
        $order->status = Order::STATUS_CANCEL;
        $commonOrder = CommonOrder::findOne(['order_id' => $this->order_id, 'order_type' => CommonOrder::TYPE_MALL, 'is_delete' => 0, 'status' => 0]);
        //没发货之前都可以取消
        //付了款的要退款
        if (!$commonOrder) {
            $t->rollBack();
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $flag = false;
        if ($order->is_pay) {
            $msg = '';
            if ($order->pay_price > 0) {
                $commonOrder->refund_no = CommonOrder::generateRefundNo($commonOrder->user_id);
                if ($order->pay_type == PaymentType::TYPE_BALANCE) {//余额支付//退还
                    BalanceLogHelper::add($order->user_id, $order->pay_price, "订单：{$order->order_no}取消,金额退款");
                    $flag = true;
                }
                if ($order->pay_type == PaymentType::TYPE_WECHAT) {
                    //微信支付退款
                    $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->union_no, 'is_pay' => 1]);
                    if (!$wechatOrder) {
                        $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->order_no, 'is_pay' => 1]);
                    }
                    if (!$wechatOrder) {
                        $t->rollBack();
                        return ResponseHelper::send(ApiCode::CODE_FAIL, '此订单非微信支付订单');
                    }
                    try {
                        $res = PaymentHelper::refund($wechatOrder->order_no, $commonOrder->refund_no, $wechatOrder->pay_price, $commonOrder->pay_price, '订单退款', $this->mall_id);
                    } catch (InvalidConfigException $e) {
                        $t->rollBack();
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    } catch (Exception $e) {
                        $t->rollBack();
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                    if ($res['code'] == 1) {
                        $t->rollBack();
                        return $res;
                    }
                    $flag = true;
                    \Yii::warning($res);
                }
                if (!$flag) {
                    $t->rollBack();
                    return $this->apiResponse(ApiCode::CODE_FAIL, '退款失败，原因：' . $msg);
                }
            }
        }
        if (!$order->save()) {
            $t->rollBack();
            return $this->apiResponse(ApiCode::CODE_FAIL, '操作失败!', ['error' => $order->getErrors()]);
        }
        $t->commit();
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功!');
    }

    public function confirm()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'user_id' => \Yii::$app->user->identity->id, 'is_confirm' => 0]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $order->is_confirm = 1;
        $order->confirm_at = time();
        $order->status = Order::STATUS_IS_CONFIRM;
        if (!$order->save()) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '操作失败!', ['error' => $order->getErrors()]);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功!');
    }

    public function delete()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'user_id' => \Yii::$app->user->identity->id]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        if ($order->status != Order::STATUS_IS_COMPLETE || $order->status != Order::STATUS_CANCEL) {

            return $this->apiResponse(ApiCode::CODE_FAIL, '订单未完成,不可删除!');
        }
        $order->is_delete = 1;
        if (!$order->save()) {
            return $this->responseErrorMsg($order);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '删除成功!');
    }

    public function getExpress()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'user_id' => \Yii::$app->user->identity->id]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $express_detail = null;

        if ($order->express_log_id) {
            $log = ExpressLog::getOne($order->express_log_id);
            if ($log) {
                try {
                    $form = new ExpressQueryForm();
                    $form->attributes = $log->attributes;
                    $res = $form->search();
                    if ($res['code'] == 0) {
                        $express_detail = $res;
                    }
                } catch (\Exception $exception) {

                }
            }
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['express_detail' => $express_detail]);
    }
}

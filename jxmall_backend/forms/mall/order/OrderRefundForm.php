<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-18
 * Time: 10:41
 */

namespace app\forms\mall\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\events\CommonOrderDetailEvent;
use app\helpers\BalanceLogHelper;
use app\helpers\ConstantHelper;
use app\helpers\IntegralLogHelper;
use app\helpers\PaymentHelper;
use app\helpers\ResponseHelper;
use app\helpers\WechatHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\CommonOrderDetail;
use app\models\Coupon;
use app\models\Order;
use app\models\OrderRefund;
use app\models\UnionOrder;
use app\models\UserCoupon;
use app\models\WechatOrder;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;
use yii\base\Exception;

class OrderRefundForm extends BaseModel
{

    public $id;
    public $status;


    public function rules()
    {
        return [
            [['status', 'id'], 'integer'],
        ]; // TODO: Change the autogenerated stub
    }

    public function save()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $refund = OrderRefund::findOne(['is_delete' => 0, 'status' => 0, 'id' => $this->id]);
        if (!$refund) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '售后订单不存在');
        }
        $refund->status = $this->status;
        if (!$refund->save()) {
            return $this->responseErrorMsg($refund);
        }
        if ($this->status == 1) {
            //需要打款
            if ($refund->type == 0) {
                $order = Order::findOne($refund->order_id);
                if ($order) {
                    if ($order->user_coupon_id) {
                        $userCoupon = UserCoupon::findOne($order->user_coupon_id);
                        if ($userCoupon) {
                            $coupon = Coupon::findOne($userCoupon->coupon_id);
                            if ($coupon) {
                                $userCoupon->status = 0;
                                $userCoupon->price = $coupon->price;
                                $userCoupon->discount = $coupon->discount;
                                $userCoupon->type = $coupon->type;
                                $userCoupon->is_goods_limit = $coupon->is_goods_limit;
                                $userCoupon->save();
                            }
                        }
                    }
                }
            }
        }

        return $this->apiResponse(ApiCode::CODE_SUCCESS, '处理成功');
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-11-13
     * @Time: 13:53
     * @Note:这里去打款
     * @return array
     */
    public function pay()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $refund = OrderRefund::findOne(['is_delete' => 0, 'status' => 1, 'id' => $this->id]);
        if (!$refund) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '售后订单不存在');
        }
        $common_order_detail = CommonOrderDetail::findOne(['id' => $refund->order_detail_id, 'is_delete' => 0]);
        if (!$common_order_detail) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '公共订单详情不存在');
        }

        $order = Order::findOne(['id' => $refund->order_id]);
        $commonOrder = CommonOrder::findOne(['order_id' => $order->id, 'order_type' => CommonOrder::TYPE_MALL, 'is_delete' => 0]);
        if ($order && $commonOrder) {
            if ($order->pay_type == PaymentType::TYPE_BALANCE) {
                BalanceLogHelper::add($order->user_id, $refund->refund_price, "订单：{$order->order_no} 售后退款");
                $refund->is_refund = 1;
                $common_order_detail->status = 2;
            }
            if ($order->pay_type == PaymentType::TYPE_WECHAT) {
                $commonOrder->refund_no = CommonOrder::generateRefundNo($commonOrder->user_id);
                if ($refund->refund_price > 0) {
                    $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->union_no,'is_pay'=>1]);
                    if (!$wechatOrder) {
                        $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->order_no,'is_pay'=>1]);
                    }
                    if (!$wechatOrder) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, '此订单非微信支付订单');
                    }
                    try {
                        $res = PaymentHelper::refund($wechatOrder->order_no, $refund->order_no, $wechatOrder->pay_price, $refund->refund_price, '订单退款', $this->mall_id);
                    } catch (InvalidConfigException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    } catch (Exception $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                    if ($res['code'] == 1) {
                        return $res;
                    }
                }
                $refund->is_refund = 1;
                $common_order_detail->status = 2;
            }
            if ($order->is_use_integral) {
                IntegralLogHelper::add($order->user_id, $order->use_integral, '订单:' . $order->order_no . '取消');
            }
        } else {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在');
        }
        $t = \Yii::$app->db->beginTransaction();
        if ($refund->save()) {
            if ($common_order_detail->save()) {
                if ($common_order_detail->status == 2) {
                    $event = new CommonOrderDetailEvent();
                    $event->id = $common_order_detail->id;
                    $event->common_order_id = $commonOrder->id;
                    \Yii::$app->trigger(CommonOrderDetailEvent::INVALID, $event);
                }
                if ($common_order_detail->user_coupon_id) {
                    $userCoupon = UserCoupon::findOne($common_order_detail->user_coupon_id);
                    if ($userCoupon) {
                        $coupon = Coupon::findOne(['id' => $userCoupon->coupon_id, 'is_delete' => 0]);
                        if ($coupon) {
                            $userCoupon->price = $coupon->price;
                            $userCoupon->discount = $coupon->discount;
                            $userCoupon->is_goods_limit = $coupon->is_goods_limit;
                            $userCoupon->type = $coupon->type;
                            $userCoupon->status = 0;
                            $userCoupon->save();
                        }
                    }
                }
                $t->commit();
                return $this->apiResponse(ApiCode::CODE_SUCCESS, '退款成功');
            }
        }
        $t->rollBack();
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '退款失败');
    }
}

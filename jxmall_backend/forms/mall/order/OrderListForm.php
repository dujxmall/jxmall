<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-02
 * Time: 19:41
 */

namespace app\forms\mall\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\helpers\IconHelper;
use app\models\BaseModel;
use app\models\CommonOrderDetail;
use app\models\Goods;
use app\models\Order;
use app\models\User;
use app\models\UserParent;

class OrderListForm extends BaseModel
{
    public $page;
    public $limit;
    public $status;
    public $keyword_type;
    public $keyword;
    public $search_date;
    public $pay_type;

    public $user_id;
    public $parent_id;

    public function rules()
    {
        return [
            [['keyword_type', 'keyword', 'pay_type'], 'string'],
            [['page', 'limit', 'status', 'user_id', 'parent_id'], 'integer'],
            [['limit'], 'default', 'value' => 10],
            [['search_date'], 'safe']
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-10-02
     * @Time: 19:42
     * @Note:列表
     */
    public function getList()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }

        $query = Order::find()
            ->alias('o')
            ->leftJoin(['u' => User::tableName()], 'u.id=o.user_id')
            ->where(['o.is_delete' => 0, 'o.mall_id' => \Yii::$app->mall->id]);
        if ($this->status == 0) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_PAY]);
        }
        if ($this->status == 1) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_SEND]);
        }
        if ($this->status == 2) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_CONFIRM]);
        }
        if ($this->status == 3) {
            $query->andWhere(['o.status' => Order::STATUS_IS_CONFIRM]);
        }
        if ($this->status == 4) {
            $query->andWhere(['o.status' => Order::STATUS_IS_COMPLETE]);
        }
        if ($this->status == 5) {
            $query->andWhere(['o.status' => Order::STATUS_CANCEL]);
        }
        if ($this->parent_id) {
            $uids = UserParent::find()->andWhere(['parent_id' => $this->parent_id, 'is_delete' => 0])->select('user_id')->distinct()->column();
            $query->andWhere(['o.user_id' => $uids]);
        }

        if ($this->keyword) {
            if ($this->keyword_type) {
                if ($this->keyword_type == 'order_no') {
                    $query->andWhere(['like', 'o.order_no', $this->keyword]);
                }
                if ($this->keyword_type == 'user_id') {
                    $query->andWhere(['o.user_id' => $this->keyword]);
                }
                if ($this->keyword_type == 'name') {
                    $query->andWhere(['o.name' => $this->keyword]);
                }
                if ($this->keyword_type == 'address') {
                    $query->andWhere(['like', 'o.address', $this->keyword]);
                }
                if ($this->keyword_type == 'nickname') {
                    $query->andWhere(['like', 'u.nickname', $this->keyword]);
                }
                if ($this->keyword_type == 'goods_name') {
                    $order_nos = CommonOrderDetail::find()->alias('od')->leftJoin(['g' => Goods::tableName()], 'g.id=od.goods_id')
                        ->andWhere(['like', 'g.name', $this->keyword])
                        ->andWhere(['g.mall_id' => \Yii::$app->mall->id, 'g.is_delete' => 0])
                        ->select('od.common_order_no')->column();
                    $query->andWhere(['o.order_no' => $order_nos]);
                }
            }
        }


        if ($this->search_date) {
            $begin_at = strtotime($this->search_date[0]);
            $end_at = strtotime($this->search_date[1]);
            $query->andWhere(['>=', 'o.created_at', $begin_at]);
            $query->andWhere(['<=', 'o.created_at', $end_at]);
        }


        if ($this->pay_type) {
            if ($this->pay_type == 'not_pay') {
                $query->andWhere(['o.is_pay' => 0]);
            }

            if ($this->pay_type == 'wechat_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_WECHAT]);
            }

            if ($this->pay_type == 'balance_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_BALANCE]);
            }
            if ($this->pay_type == 'sys_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_SYSTEM]);
            }
        }

        if ($this->user_id) {

            $query->andWhere(['u.id' => $this->user_id]);
        }

        $list = $query->select('u.nickname,u.avatar_url,u.id,u.mobile,o.*')->page($pagination, $this->limit, $this->page)->orderBy('o.created_at DESC')->asArray()->all();
        foreach ($list as &$item) {
            $detail_list = CommonOrderDetail::find()->with('goods')->where(['is_delete' => 0, 'common_order_no' => $item['order_no']])->asArray()->all();
            $item['goods_list'] = $detail_list;
            $item['created_at'] = date('Y-m-d H:i:s', $item['created_at']);
            if ($item['pay_type'] == PaymentType::TYPE_WECHAT) {
                $item['pay_type_logo'] = IconHelper::wechat();;
            }

            if ($item['pay_type'] == PaymentType::TYPE_BALANCE) {
                $item['pay_type_logo'] = IconHelper::balance();
            }

            if ($item['pay_type'] == PaymentType::TYPE_SYSTEM) {
                $item['pay_type_logo'] = IconHelper::sysPay();
            }
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['list' => $list, 'pagination' => $pagination]);
    }
}

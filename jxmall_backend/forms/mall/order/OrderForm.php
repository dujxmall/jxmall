<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-02
 * Time: 22:18
 */

namespace app\forms\mall\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\helpers\AddressHelper;
use app\helpers\BalanceLogHelper;
use app\helpers\ConstantHelper;
use app\helpers\PaymentHelper;
use app\helpers\ResponseHelper;
use app\helpers\SerializeHelper;
use app\helpers\WechatHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\CommonOrderDetail;
use app\models\ExpressLog;
use app\models\Order;
use app\models\OrderRefund;
use app\models\UnionOrder;
use app\models\User;
use app\models\WechatOrder;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;
use yii\base\Exception;

class OrderForm extends BaseModel
{

    public $order_id;


    public function rules()
    {
        return [
            [['order_id'], 'required'],
            [['order_id'], 'integer']
        ]; // TODO: Change the autogenerated stub
    }

    public function search()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::find()->where(['is_delete' => 0, 'id' => $this->order_id, 'mall_id' => \Yii::$app->mall->id])->asArray()->one();
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在!');
        }
        $order['created_at'] = date('Y-m-d H:i:s', $order['created_at']);
        $list = CommonOrderDetail::find()->with('goods')->where(['is_delete' => 0, 'common_order_no' => $order['order_no']])->asArray()->all();
        $total_price = 0;

        foreach ($list as &$item) {
            if ($item['attr']) {
                $item['attr'] = SerializeHelper::decode($item['attr']);
            }
            $item['express_no'] = '';
            $item['express_code'] = '';
            $item['express_name'] = '';
            if ($item['is_send'] && $item['express_log_id']) {
                $log = ExpressLog::findOne(['id' => $item['express_log_id'], 'is_delete' => 0]);
                if ($log) {
                    $item['express_no'] = $log->express_no;
                    $item['express_code'] = $log->express_code;
                    $item['express_name'] = $log->express_name;
                }
            }
            $total_price += $item['total_price'];
            $refund = OrderRefund::findOne(['order_detail_id' => $item['id'], 'is_delete' => 0, 'order_id' => $this->order_id]);
            $item['has_refund'] = 0;
            if ($refund) {
                $item['refund_type'] = $refund->type;
                $item['refund_status'] = $refund->status;
                $item['is_refund'] = $refund->is_refund;
                $item['has_refund'] = 1;
            }
        }
        unset($item);

        $order['goods_total_price'] = number_format($total_price, 2);
        $user = User::find()->where(['id' => $order['user_id'], 'is_delete' => 0])->select('nickname,avatar_url,id')->one();
        if (!$user) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '用户不存在！');
        }

        $common_order = CommonOrder::findOne(['order_id' => $this->order_id, 'is_delete' => 0, 'order_type' => CommonOrder::TYPE_MALL]);

        if ($common_order->is_pay == 1 && $order['is_pay'] == 0) {
            $order['is_pay'] = '1';
        }

        $area = AddressHelper::getArea($order['province_code'], $order['city_code'], $order['county_code'], $order['town_code']);
        $order['area'] = $area;


        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['user' => $user, 'order' => $order, 'list' => $list]);
    }

    public function confirm()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'mall_id' => \Yii::$app->mall->id, 'is_confirm' => 0]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在,或已确认收货!');
        }
        $order->is_confirm = 1;
        $order->confirm_at = time();
        $order->status = Order::STATUS_IS_CONFIRM;
        if (!$order->save()) {
            return $this->responseErrorMsg($order);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '确认成功!');
    }

    public function finish()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::find()->andWhere(['is_delete' => 0, 'id' => $this->order_id, 'mall_id' => \Yii::$app->mall->id])->andWhere(['!=', 'status', Order::STATUS_CANCEL])->one();
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在,或已完成');
        }
        /**
         * @var Order $order ;
         */
        $order->is_finish = 1;
        $order->finish_at = time();
        $order->status = Order::STATUS_IS_COMPLETE;
        if (!$order->save()) {
            return $this->responseErrorMsg($order);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '确认成功!');
    }

    public function close()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'mall_id' => \Yii::$app->mall->id, 'is_cancel' => 0]);
        if (!in_array($order->status, [Order::STATUS_NOT_PAY, Order::STATUS_NOT_SEND])) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不可取消');
        }
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在,或已取消');
        }
        $order->is_cancel = 1;
        $order->cancel_at = time();
        $order->status = Order::STATUS_CANCEL;
        $commonOrder = CommonOrder::findOne(['order_id' => $this->order_id, 'order_type' => CommonOrder::TYPE_MALL, 'is_delete' => 0, 'status' => 0]);
        //没发货之前都可以取消
        //付了款的要退款

        $flag = false;
        if ($order->is_pay) {
            $msg = '';
            $commonOrder->refund_no = CommonOrder::generateRefundNo($commonOrder->user_id);
            if ($order->pay_type == PaymentType::TYPE_BALANCE) {//余额支付//退还
                BalanceLogHelper::add($order->user_id, $order->pay_price, "订单：{$order->order_no}取消,金额退款");
                $flag = true;
            }
            try {
                if ($order->pay_type == PaymentType::TYPE_WECHAT) {
                    //微信支付退款
                    $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->union_no,'is_pay'=>1]);
                    if (!$wechatOrder) {
                        $wechatOrder = WechatOrder::findOne(['order_no' => $commonOrder->order_no,'is_pay'=>1]);
                    }
                    if (!$wechatOrder) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, '此订单非微信支付订单');
                    }
                    try {
                        $res = PaymentHelper::refund($wechatOrder->order_no, $commonOrder->refund_no, $wechatOrder->pay_price, $commonOrder->pay_price, "订单：{$order->order_no}取消,金额退款", $this->mall_id);
                    } catch (InvalidConfigException $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    } catch (Exception $e) {
                        return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
                    }
                    if ($res['code'] == 1) {
                        return $res;
                    }
                    $flag = true;
                }
            } catch (\Exception $exception) {
                $msg = $exception->getMessage();
            }
            if (!$flag) {
                return $this->apiResponse(ApiCode::CODE_FAIL, '退款失败，原因：' . $msg);
            }
        }
        if (!$order->save()) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '操作失败!', ['error' => $order->getErrors()]);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '关闭成功!');
    }

    public function pay()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $order = Order::findOne(['is_delete' => 0, 'id' => $this->order_id, 'mall_id' => $this->mall_id, 'status' => Order::STATUS_NOT_PAY]);
        if (!$order) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '订单不存在,或已取消');
        }
        $order->is_pay = 1;
        $order->pay_time = time();
        $order->pay_type = PaymentType::TYPE_SYSTEM;
        $order->status = Order::STATUS_NOT_SEND;
        if (!$order->save()) {
            return $this->responseErrorMsg($order);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '已确认支付!');
    }
}

<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-02
 * Time: 19:41
 */

namespace app\forms\mall\order;


use app\core\ApiCode;
use app\core\PaymentType;
use app\helpers\DateHelper;
use app\helpers\IconHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\CommonOrderDetail;
use app\models\Goods;
use app\models\Order;
use app\models\OrderDetail;
use app\models\User;
use app\models\UserAddress;
use app\models\UserParent;

class OrderExportForm extends BaseModel
{
    public $page;
    public $limit;
    public $status;
    public $keyword_type;
    public $keyword;
    public $search_date;
    public $pay_type;
    public $user_id;
    public $parent_id;

    public function rules()
    {
        return [
            [['keyword_type', 'keyword', 'pay_type'], 'string'],
            [['page', 'limit', 'status', 'user_id', 'parent_id'], 'integer'],
            [['limit'], 'default', 'value' => 10],
            [['search_date'], 'safe']
        ]; // TODO: Change the autogenerated stub
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-10-02
     * @Time: 19:42
     * @Note:列表
     */
    public function getList()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }


        $query = Order::find()
            ->alias('o')
            ->leftJoin(['u' => User::tableName()], 'u.id=o.user_id')
            ->where(['o.is_delete' => 0, 'o.mall_id' => \Yii::$app->mall->id]);
        if ($this->status == 0) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_PAY]);
        }
        if ($this->status == 1) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_SEND]);
        }
        if ($this->status == 2) {
            $query->andWhere(['o.status' => Order::STATUS_NOT_CONFIRM]);
        }
        if ($this->status == 3) {
            $query->andWhere(['o.status' => Order::STATUS_IS_CONFIRM]);
        }
        if ($this->status == 4) {
            $query->andWhere(['o.status' => Order::STATUS_IS_COMPLETE]);
        }
        if ($this->status == 5) {
            $query->andWhere(['o.status' => Order::STATUS_CANCEL]);
        }

        if ($this->parent_id) {
            $uids = UserParent::find()->andWhere(['parent_id' => $this->parent_id, 'is_delete' => 0])->select('user_id')->distinct()->column();
            $query->andWhere(['o.user_id'=>$uids]);
        }

        if ($this->keyword) {
            if ($this->keyword_type) {
                if ($this->keyword_type == 'order_no') {
                    $query->andWhere(['like', 'o.order_no', $this->keyword]);
                }
                if ($this->keyword_type == 'user_id') {
                    $query->andWhere(['o.user_id' => $this->keyword]);
                }
                if ($this->keyword_type == 'name') {
                    $query->andWhere(['o.name' => $this->keyword]);
                }
                if ($this->keyword_type == 'address') {
                    $query->andWhere(['like', 'o.address', $this->keyword]);
                }
                if ($this->keyword_type == 'nickname') {
                    $query->andWhere(['like', 'u.nickname', $this->keyword]);
                }
                if ($this->keyword_type == 'goods_name') {
                    $order_ids = CommonOrderDetail::find()
                        ->alias('od')
                        ->leftJoin(['g' => Goods::tableName()], 'g.id=od.goods_id')
                        ->andWhere(['like', 'g.name', $this->keyword])
                        ->andWhere(['g.mall_id' => \Yii::$app->mall->id, 'g.is_delete' => 0])
                        ->select('od.common_order_no')->column();
                    $query->andWhere(['o.order_no' => $order_ids]);
                }
            }
        }


        if ($this->search_date) {
            $begin_at = strtotime($this->search_date[0]);
            $end_at = strtotime($this->search_date[1]);
            $query->andWhere(['>=', 'o.created_at', $begin_at]);
            $query->andWhere(['<=', 'o.created_at', $end_at]);
        }


        if ($this->pay_type) {
            if ($this->pay_type == 'not_pay') {
                $query->andWhere(['o.is_pay' => 0]);
            }

            if ($this->pay_type == 'wechat_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_WECHAT]);
            }

            if ($this->pay_type == 'balance_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_BALANCE]);
            }
            if ($this->pay_type == 'sys_pay') {
                $query->andWhere(['o.is_pay' => 1, 'o.pay_type' => PaymentType::TYPE_SYSTEM]);
            }
        }

        if ($this->user_id) {
            $query->andWhere(['u.id' => $this->user_id]);
        }

        /*   $list = $query->select('u.nickname,u.avatar_url,u.id,u.mobile,o.*')->page($pagination, $this->limit, $this->page)->orderBy('o.created_at DESC')->asArray()->all();
        */
        $list = $query->select('u.nickname,u.avatar_url,u.id,u.mobile,o.*')->distinct()->orderBy('o.created_at DESC')->asArray()->all();


        foreach ($list as &$item) {
            $goods_detail = '';
            $detail_list = CommonOrderDetail::find()->with('goods')->where(['is_delete' => 0, 'common_order_no' => $item['order_no']])->asArray()->all();
            foreach ($detail_list as $detail) {
                $goods_detail .= $detail['goods']['name'] . '数量:' . $detail['num'] . ';';
            }
            unset($detail);

            $item['goods_detail'] = $goods_detail;
            $user_address = UserAddress::findOne([
                'province_code' => $item['province_code'],
                'city_code' => $item['city_code'],
                'county_code' => $item['county_code'],
                'town_code' => $item['town_code']
            ]);
            if ($user_address) {
                $item['province'] = $user_address->province_name;
                $item['city'] = $user_address->city_name;
                $item['county'] = $user_address->county_name;
                $item['town'] = $user_address->town_name;
            } else {
                $item['province'] = '-';
                $item['city'] = '-';
                $item['county'] = '-';
                $item['town'] = '-';
            }
            if ($item['status'] == 0) {
                $item['status'] = '待支付';
            }
            if ($item['status'] == 1) {
                $item['status'] = '待发货';
            }
            if ($item['status'] == 2) {
                $item['status'] = '已发货';
            }
            if ($item['status'] >= 3 && $item['status'] <= 5) {
                $item['status'] = '已完成';
            }
            if ($item['status'] >= 5) {
                $item['status'] = '无效';
            }

            $item['created_at'] = DateHelper::format($item['created_at']);
            if ($item['pay_time']) {
                $item['pay_time'] = DateHelper::format($item['pay_time']);
            } else {
                $item['pay_time'] = '-';
            }
            if ($item['send_at']) {
                $item['send_at'] = DateHelper::format($item['send_at']);
            } else {
                $item['send_at'] = '-';
            }


        }
        unset($item);
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['list' => $list]);
    }
}

<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-11-10
 * Time: 10:36
 */

namespace app\forms\mall\finance;


use app\core\ApiCode;
use app\helpers\BalanceLogHelper;
use app\helpers\ConstantHelper;
use app\helpers\DateHelper;
use app\helpers\OptionHelper;
use app\helpers\PriceLogHelper;
use app\helpers\ResponseHelper;
use app\helpers\ServerHelper;
use app\helpers\WechatHelper;
use app\models\BaseModel;
use app\models\Cash;
use app\models\User;
use app\models\UserInfo;
use EasyWeChat\Kernel\Exceptions\InvalidArgumentException;
use EasyWeChat\Kernel\Exceptions\InvalidConfigException;
use EasyWeChat\Kernel\Exceptions\RuntimeException;
use GuzzleHttp\Exception\GuzzleException;

class CashForm extends BaseModel
{
    public $id;
    public $status;
    public $receipt;
    public $reason;


    public function rules()
    {
        return [
            [['id', 'status'], 'integer'],
            [['receipt', 'reason'], 'string']
        ]; // TODO: Change the autogenerated stub
    }

    public function handleApply()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $cash = Cash::findOne(['id' => $this->id, 'is_delete' => 0, 'status' => 0]);
        if (!$cash) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '提现申请不存在');
        }
        $cash->status = $this->status;
        $t = \Yii::$app->db->beginTransaction();
        if ($this->reason) {
            $cash->reason = $this->reason;
        }
        if (!$cash->save()) {
            $t->rollBack();
            return $this->responseErrorMsg($cash);
        }
        if ($cash->status == 2) {
            if (!PriceLogHelper::savePrice($cash->user_id, $cash->cash_price, '提现被驳回，提现单号：' . $cash->order_no)) {
                $t->rollBack();
                return $this->apiResponse(ApiCode::CODE_FAIL, '操作失败,请重试');
            }
        }
        $t->commit();
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功');
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-11-10
     * @Time: 10:42
     * @Note:打款
     */
    public function handlePay()
    {

        $cash = Cash::findOne(['id' => $this->id, 'is_delete' => 0, 'is_price' => 0]);
        if (!$cash) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '提现申请不存在');
        }
        if ($cash->status == 0 || $cash->status == 2) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '审核状态不正确，请确认后再重试');
        }
        $user = User::getOne($cash->user_id);
        if (!$user) {
            return ResponseHelper::send(ApiCode::CODE_FAIL, '用户不存在！');
        }
        $setting = OptionHelper::get('cash_setting', $this->mall_id);
        if (!$setting) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '系统未开启提现设置');
        }
        $content = "佣金提现";
        $t = \Yii::$app->db->beginTransaction();
        WechatHelper::init(\Yii::$app->mall->id);
        $app = \Yii::$app->wechat->payment;
        if ($cash->cash_type == 'balance') {
            if (!BalanceLogHelper::add($cash->user_id, $cash->price, '佣金提现到余额')) {
                $t->rollBack();
                return $this->apiResponse(ApiCode::CODE_FAIL, '发生错误');
            }
            $cash->is_price = 1;
            $cash->status = 1;
            try {
                if (!$cash->save()) {
                    $t->rollBack();
                    return $this->responseErrorMsg($cash);
                }
            } catch (\Exception $e) {
                $t->rollBack();
                return $this->apiResponse(ApiCode::CODE_FAIL, $e->getMessage());

            }
            $t->commit();
            return $this->apiResponse(ApiCode::CODE_SUCCESS, '打款成功');
        }

        if ($cash->cash_type == 'wechat') {
            //提现到微信
            $cash->is_price = 1;
            $cash->is_manual = 0;
            if (!$cash->save()) {
                $t->rollBack();
                return $this->responseErrorMsg($cash);
            }

            $openid = '';
            $userInfo = UserInfo::findOne(['user_id' => $user->id, 'platform' => $user->platform]);
            if ($userInfo) {
                $openid = $userInfo->openid;
            }
            if (!$openid) {
                ResponseHelper::send(ApiCode::CODE_FAIL, '获取openid失败');
            }
            $res = $app->transfer->toBalance([
                'partner_trade_no' => $cash->order_no, // 商户订单号，需保持唯一性(只能是字母或者数字，不能包含有符号)
                'openid' => $openid,
                'check_name' => 'NO_CHECK', // NO_CHECK：不校验真实姓名, FORCE_CHECK：强校验真实姓名
                're_user_name' => '', // 如果 check_name 设置为FORCE_CHECK，则必填用户真实姓名
                'amount' => pay_fee($cash->price), // 企业付款金额，单位为分
                'desc' => '提现', // 企业付款操作说明信息。必填
            ]);
            if ($res['result_code'] == 'FAIL') {
                $errRes = $res['err_code_des'];
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $errRes);
            }
            $t->commit();
            return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功');
        } elseif ($cash->type == 'bank') {
            if ($setting['other']['bank_type'] == 'manual') {//手动打款
                $cash->is_manual = 1;
                $cash->is_price = 1;
                $cash->save();
                $t->commit();
                return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功');
            }
            if (\Yii::$app->params['wechatPaymentConfig']['wechat_type'] == 'joinpay') {//使用汇聚支付
                $arr = [
                    'callbackUrl' => ServerHelper::getHost() . '/web/index.php?r=/notify/joinpay/cash-single-pay',
                    'requestTime' => DateHelper::format(time()),
                    'productCode' => 'BANK_PAY_DAILY_ORDER',//朝夕付
                    "receiverAccountNoEnc" => $cash->account,
                    "merchantOrderNo" => $cash->order_no,
                    "receiverNameEnc" => $cash->name,
                    "receiverBankChannelNo" => "",
                    "paidAmount" => $cash->price,
                    "paidDesc" => "提现",
                ];
                $res = \Yii::$app->joinPay->singlePay($arr);
                $cash->is_joinpay = 1;
                \Yii::warning($res);
                $msg = '操作成功';
                if ($res['statusCode'] == '2001') {
                    //  $cash->is_joinpay = 1;
                    if ($cash->joinpay_desc) {
                        $cash->joinpay_desc .= $res['message'] . PHP_EOL;
                    } else {
                        $cash->joinpay_desc = $res['message'] . PHP_EOL;
                    }
                    $cash->save();
                    $t->commit();
                    return ResponseHelper::send(ApiCode::CODE_SUCCESS, $res['message']);
                } else {
                    try {
                        $msg = $res['data']['errorDesc'];
                        if ($cash->joinpay_desc) {
                            $cash->joinpay_desc .= $msg . PHP_EOL;
                        } else {
                            $cash->joinpay_desc = $msg . PHP_EOL;
                        }
                    } catch (\Exception $exception) {
                    }
                    $cash->save();
                    $t->commit();
                }
                return ResponseHelper::send(ApiCode::CODE_FAIL, $msg);
            }
            //打款到银行卡
            try {
                $res = $app->transfer->toBankCard([
                    'partner_trade_no' => $cash->order_no, // 商户订单号，需保持唯一性(只能是字母或者数字，不能包含有符号)
                    'enc_bank_no' => $cash->account,
                    'enc_true_name' => $cash->name, // NO_CHECK：不校验真实姓名, FORCE_CHECK：强校验真实姓名
                    'bank_code' => $cash->bank_code, // 如果 check_name 设置为FORCE_CHECK，则必填用户真实姓名
                    'amount' => pay_fee($cash->price), // 企业付款金额，单位为分
                    'desc' => '收益提现', // 企业付款操作说明信息。必填
                ]);
            } catch (InvalidArgumentException $e) {
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            } catch (InvalidConfigException $e) {
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            } catch (RuntimeException $e) {
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            } catch (GuzzleException $e) {
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $e->getMessage());
            }
            \Yii::warning($res);
            if ($res['result_code'] == 'FAIL') {
                $errRes = $res['err_code_des'];
                $t->rollBack();
                return ResponseHelper::send(ApiCode::CODE_FAIL, $errRes);
            }
            $cash->is_price = 1;
            $cash->save();
            $t->commit();
            return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功');
        }
    }

    /**
     * @Author: 动力宇宙 ganxiaohao
     * @Date: 2020-11-10
     * @Time: 11:50
     * @Note:上传打款凭证
     * @return array
     * @throws \yii\db\Exception
     */
    public function uploadReceipt()
    {
        $cash = Cash::findOne(['id' => $this->id, 'is_delete' => 0]);
        if (!$cash) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '提现申请不存在');
        }
        if (!$this->receipt) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '请上传打款凭证');
        }
        $cash->receipt = $this->receipt;
        if (!$cash->save()) {
            return $this->responseErrorMsg($cash);
        }
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '操作成功!');
    }


}

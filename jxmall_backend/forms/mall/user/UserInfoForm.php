<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-10-18
 * Time: 16:06
 */

namespace app\forms\mall\user;


use app\core\ApiCode;
use app\helpers\IconHelper;
use app\helpers\OptionHelper;
use app\models\BaseModel;
use app\models\CommonOrder;
use app\models\Level;
use app\models\OrderRefund;
use app\models\User;

class UserInfoForm extends BaseModel
{
    public $user_id;

    public function rules()
    {
        return [
            [['user_id'], 'required'],
            [['user_id'], 'integer'],
        ]; // TODO: Change the autogenerated stub
    }


    public function search()
    {
        if (!$this->validate()) {
            return $this->responseErrorInfo();
        }
        $info = [];
        $user = User::findOne(['is_delete' => 0, 'id' => $this->user_id, 'mall_id' => \Yii::$app->mall->id]);
        if (!$user) {
            return $this->apiResponse(ApiCode::CODE_FAIL, '用户不存在!');
        }

        $parent = User::getBaseInfo($user->parent_id);
        $info['parent_nickname'] = '';

        $info['parent_avatar_url'] = '';

        if (!$parent) {
            $mall_setting = OptionHelper::get('mall_setting', $user->mall_id);
            if ($mall_setting) {
                $info['parent_nickname'] = $mall_setting['name'];
                $info['parent_avatar_url'] = $mall_setting['logo'];
            }
        } else {
            $info['parent_nickname'] = $parent->nickname;
            $info['parent_avatar_url'] = $parent->avatar_url;
        }

        $info['nickname'] = $user->nickname;
        $info['avatar_url'] = $user->avatar_url;
        $info['money'] = $user->money;
        $info['integral'] = $user->integral;
        $info['mobile'] = $user->mobile;
        $info['remarks'] = $user->remarks;
        $info['price'] = $user->price;
        $info['created_at'] = date('Y-m-d H:i:s', $user->created_at);
        $info['updated_at'] = date('Y-m-d H:i:s', $user->updated_at);
        $info['login_ip'] = $user->login_ip;
        $info['id'] = $user->id;
        if ($user->platform == User::PLATFORM_WECHAT || $user->platform == User::PLATFORM_WXAPP) {
            $info['platform_logo'] = IconHelper::wechat();
        }
        if ($user->platform == User::PLATFORM_MPWX) {
            $info['platform_logo'] = IconHelper::mpwx();
        }
        $level = Level::findOne(['mall_id' => $user->mall_id, 'level' => $user->level, 'is_delete' => 0]);
        $info['level_name'] = "默认等级";
        if ($level) {
            $info['level_name'] = $level->name;
        }
        $level_list = Level::find()->where(['is_delete' => 0, 'mall_id' => $user->mall_id, 'enabled' => 1])->andWhere(['!=', 'level', $user->level])->orderBy('level ASC')->asArray()->all();
        array_unshift($level_list, ['name' => '默认等级', 'level' => 0]);

        $success_order_count = CommonOrder::find()->where(['user_id' => $this->user_id, 'status' => 1])->count();
        $success_order_price = CommonOrder::find()->where(['user_id' => $this->user_id, 'status' => 1])->sum('pay_price');
        $success_refund_count = OrderRefund::find()->where(['user_id' => $this->user_id, 'status' => 1, 'type' => 1])->count();
        $success_refund_price = OrderRefund::find()->where(['user_id' => $this->user_id, 'status' => 1, 'type' => 1])->sum('refund_price');

        $info['success_order_count'] = $success_order_count ?? 0;
        $info['success_order_price'] = $success_order_price ?? '0.00';
        $info['success_refund_price'] = $success_refund_price ?? '0.00';
        $info['success_refund_count'] = $success_refund_count ?? 0;
        $info['coupon'] = 0;
        return $this->apiResponse(ApiCode::CODE_SUCCESS, '', ['user' => $info, 'level_list' => $level_list]);
    }
}

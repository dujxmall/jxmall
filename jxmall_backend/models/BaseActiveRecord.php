<?php
/**
 * @link:http://www.dujxmall.com/
 * @copyright: Copyright (c) 2020 广州动力宇宙信息科技
 * Created by PhpStorm
 * Author: ganxiaohao
 * Date: 2020-09-10
 * Time: 16:22
 */

namespace app\models;


use app\helpers\CacheHelper;
use app\helpers\JobHelper;
use app\helpers\SerializeHelper;
use app\jobs\admin\AdminActionJob;
use yii\caching\DbDependency;
use yii\db\ActiveRecord;
use yii\debug\models\search\Log;

class BaseActiveRecord extends ActiveRecord
{

    public function beforeValidate()
    {
        $time = time();
        $insert = $this->isNewRecord;
        $isCreatedAt = false;
        $isUpdatedAt = false;
        $isDeletedAt = false;
        $isDelete = false;
        if (isset($this->attributes) && is_array($this->attributes())) {
            foreach ($this->attributes() as $item) {
                $item === 'created_at' ? $isCreatedAt = true : '';
                $item === 'updated_at' ? $isUpdatedAt = true : '';
                $item === 'deleted_at' ? $isDeletedAt = true : '';
                $item === 'is_delete' ? $isDelete = true : '';
            }
        }

        if ($insert === true && $isCreatedAt === true) {
            $this->created_at = $time;
        }

        if ($isUpdatedAt === true) {
            $this->updated_at = $time;
            $this->updated_time = date('Y-m-d H:i:s', $time);
        }

        if ($isDelete === true && $isDeletedAt === true) {
            if ((int)$this->is_delete === 1) {
                $this->deleted_at = $time;
                $this->deleted_time = date('Y-m-d H:i:s', $time);
            } else {
                $this->deleted_at = 0;
            }
        }

        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * Created by PhpStorm.
     * User：ganxi
     * Date：2022/4/22
     * Time：15:21
     * Note：复写update方法
     */
    public static function updateAll($attributes, $condition = '', $params = [])
    {
        $time = time();
        if (!array_key_exists('updated_time', $attributes)) {
            $attributes['updated_time'] = date('Y-m-d H:i:s', $time);
        }
        if (!array_key_exists('updated_at', $attributes)) {
            $attributes['updated_at'] = $time;
        }
        if (array_key_exists('is_delete', $attributes)) {
            if (!array_key_exists('deleted_at', $attributes)) {
                $attributes['deleted_at'] = $time;
                $attributes['deleted_time'] = date('Y-m-d H:i:s', $time);
            }
        }
        return parent::updateAll($attributes, $condition, $params); // TODO: Change the autogenerated stub
    }

    /**
     * @return BaseActiveQuery
     */
    public static function find()
    {
        return \Yii::createObject(BaseActiveQuery::className(), [get_called_class()]);
    }

    public static function getCacheDbDependency($params = null)
    {
        // 缓存依赖sql
        $dbDependencySql = self::find()->select('max(updated_at)')
            ->where('is_delete =0')
            ->createCommand()
            ->sql;
        // 设置缓存依赖
        $dbDependency = new DbDependency();
        $dbDependency->db = \Yii::$app->components['db'];
        $dbDependency->sql = $dbDependencySql;
        $dbDependency->params = $params;
        return $dbDependency;
    }

    public static function getOne($id)
    {
        $key = CacheHelper::getKeyName(get_called_class() . '_' . $id);
        $model = \Yii::$app->cache->get($key);
        if (!$model) {
            \Yii::$app->cache->delete($key);
            $model = self::findOne(['is_delete' => 0, 'id' => $id]);
            if (!$model) {
                return null;
            }
            \Yii::$app->cache->add($key, $model, 24 * 60 * 60, self::getCacheDbDependency());
        }
        return $model;
    }


    public function afterSave($insert, $changedAttributes)
    {
        //只有web应用才走管理员日志
        if (\Yii::$app->id == 'jxmall'&&\Yii::$app->isAdmin) {
            $arr = ['created_at', 'updated_at', 'deleted_at'];
            $afterUpdate = $this->attributes;
            $newBeforeUpdate = [];
            $newAfterUpdate = [];
            if ($insert) {
                $remark = '数据插入';
            } else {
                $remark = '数据更新';
            }
            if (isset($afterUpdate['is_delete']) && $afterUpdate['is_delete'] == 1) {
                $remark = '数据删除';
            }
            foreach ($changedAttributes as $key => $item) {
                if (in_array($key, $arr)) {
                    unset($changedAttributes[$key]);
                    continue;
                }
                if ($item != $afterUpdate[$key]) {
                    try {
                        $newBeforeUpdate[$key] = SerializeHelper::decode($item);
                    } catch (\Exception $e) {
                        $newBeforeUpdate[$key] = $item;
                    }
                    try {
                        $newAfterUpdate[$key] = SerializeHelper::decode($afterUpdate[$key]);
                    } catch (\Exception $e) {
                        $newAfterUpdate[$key] = $afterUpdate[$key];
                    }
                }
            }
            if (count($newAfterUpdate)) {
                $admin_id = \Yii::$app->admin->identity->id;
                if (get_called_class() != AdminActionLog::class) {
                    JobHelper::push(new AdminActionJob(
                        [
                            'newBeforeUpdate' => $newBeforeUpdate,
                            'newAfterUpdate' => $newAfterUpdate,
                            'model' => get_called_class(),
                            'model_id' => $this->getPrimaryKey(false),
                            'remark' => $remark,
                            'admin_id' => $admin_id,
                            'mall_id' => isset($this->attributes['mall_id']) ? $this->attributes['mall_id'] : 0
                        ]
                    ), 2);
                }
            }
        }

        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub
    }

    public static function defaultWhere()
    {
        return ['is_delete' => 0];
    }
}
